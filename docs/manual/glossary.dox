/**
@page Glossary

## QUIC
### A network protocol, built on top of UDP to replace TCP for HTTP traffic. Used for its rich feature set without compromising performance.

## Msquic
### The default implementation of the QUIC protocol used by this library.

## Flatbuffers
### A zero-copy serialization library used to send and receive objects over a QUIC connection.

## Listener
### Responsible for handling the routing of incoming data from different endpoints.

## Connection
### Responsible for handling the routing of incoming data from a single endpoint.

## Stream
### A channel initiated by the server or client and unidirectional or bidirectional used to send data. This is a feature of the QUIC protocol.

## Control Stream
### A special QUIC stream categorised by it being the first created and last destroyed. Serves as the root communication channel over which the entire connection is managed.

## Endpoint
### A generalized notion of a participant in a communication protocol. QUIC, and voxels game protocol by extension, has exactly two types Client and Server.

## Local Endpoint
### Used to refer to the role in which the computer in which the software using this library is running is within the connection.

## Remote Endpoint
### Used to refer to the role in which the computer communicating with this computer is within the connection.

## Server
### The Endpoint responsible for storing canonical game state and synchronising this state, while factoring in the potentially multiple connected clients actions.

## Client
### The endpoint responsible for displaying the game state through graphics or other means and generating actions typically through input devices used by a player.

## Headless Client
### An automated client whose actions are generated by a script or means other than a human, they typically do not output graphics.

## Handshake
### Initial stage of the protocol after a quic connection is formed where the client and server send introductory information.

## Event
### An event is an object that represents something specific has happened, e.g we received a specific piece of data.

## Response
### An object that the library uses to indicate what the library needs to do in order to respond appropriately to an event.

## Event handler
### A function that takes an event type as parameter and returns a response, may also have additional handling side affects.

## Event Dispatcher
### A functor comprised of multiple overloads with each overload responsible for taking in a type of event and calling the appropriate user callback handler(s).

*/